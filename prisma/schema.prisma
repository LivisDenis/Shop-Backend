// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  name     String
  surname  String
  shop     Shop[]
  orders   Order[]
  basket   Basket?
  contact  Contact[]
  roles    Role[]
}

model Shop {
  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String
  image       String
  userId      Int?
  User        User?     @relation(fields: [userId], references: [id])
  clothes     Clothes[]
}

model Role {
  id          Int    @id @default(autoincrement())
  value       String @unique
  description String
  users       User[]
}

model Contact {
  id      Int     @id @default(autoincrement())
  phone   String?
  address String?
  User    User?   @relation(fields: [userId], references: [id])
  userId  Int?
}

model Basket {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int             @unique
  basketClothes BasketClothes[]
}

model BasketClothes {
  id        Int     @id @default(autoincrement())
  basket    Basket? @relation(fields: [basketId], references: [id])
  basketId  Int?
  clothes   Clothes @relation(fields: [clothesId], references: [id])
  clothesId Int     @unique
}

model Order {
  id        Int       @id @default(autoincrement())
  status    String
  address   String
  phone     String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  clothes   Clothes[]
  createdAt DateTime  @default(now())
}

model Clothes {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  price         String
  image         Image[]
  order         Order?         @relation(fields: [orderId], references: [id])
  orderId       Int?
  clothesInfo   ClothesInfo[]
  basketClothes BasketClothes?
  brand         Brand?         @relation(fields: [brandId], references: [id])
  brandId       Int?
  type          Type?          @relation(fields: [typeId], references: [id])
  typeId        Int?
  Shop          Shop?          @relation(fields: [shopId], references: [id])
  shopId        Int?
}

model Image {
  id        Int      @id @default(autoincrement())
  fileName  String
  Clothes   Clothes? @relation(fields: [clothesId], references: [id])
  clothesId Int?
}

model ClothesInfo {
  id           Int      @id @default(autoincrement())
  description  String
  size         Int
  color        String
  manufacturer String
  sku          String
  clothes      Clothes? @relation(fields: [clothesId], references: [id])
  clothesId    Int?
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  types   Type[]
  clothes Clothes[]
}

model Type {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  brands  Brand[]
  clothes Clothes[]
}
